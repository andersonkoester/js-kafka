apiVersion: apps/v1
kind: Deployment
metadata:
  name: waiter
spec:
  replicas: 3
  selector:
    matchLabels:
      app: waiter
  template:
    metadata:
      labels:
        app: waiter
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: waiter
        image: andersonkoester/waiter:latest
        command: ["yarn", "prod"]
        ports:
        - containerPort: 3000
        env:
        - name: PORT
          value: "3000"
        - name: KAFKA_BROKER_URI
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_BROKER_URI
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_USERNAME
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_PASSWORD
        - name: KAFKA_TOPIC_PREFIX
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_TOPIC_PREFIX

apiVersion: v1
kind: Service
metadata:
  name: waiter
spec:
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3000
    name: http
  selector:
    app: waiter

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-nginx
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /
        backend:
          serviceName: waiter
          servicePort: 80

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cooker
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cooker
  template:
    metadata:
      labels:
        app: cooker
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: cooker
        image: andersonkoester/kitchen:latest
        command: ["yarn", "prod"]
        env:
        - name: CONSUMER_TYPE
          value: "Cooker"
        - name: KAFKA_BROKER_URI
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_BROKER_URI
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_USERNAME
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_PASSWORD
        - name: KAFKA_TOPIC_PREFIX
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_TOPIC_PREFIX

apiVersion: apps/v1
kind: Deployment
metadata:
  name: bartender
spec:
  replicas: 2
  selector:
    matchLabels:
      app: bartender
  template:
    metadata:
      labels:
        app: bartender
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: bartender
        image: andersonkoester/kitchen:latest
        command: ["yarn", "prod"]
        env:
        - name: CONSUMER_TYPE
          value: "Bartender"
        - name: KAFKA_BROKER_URI
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_BROKER_URI
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_USERNAME
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_PASSWORD
        - name: KAFKA_TOPIC_PREFIX
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_TOPIC_PREFIX

apiVersion: apps/v1
kind: Deployment
metadata:
  name: delivery-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: delivery-app
  template:
    metadata:
      labels:
        app: delivery-app
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: delivery-app
        image: andersonkoester/delivery-app:latest
        command: ["yarn", "prod"]
        ports:
        - containerPort: 4000
        env:
        - name: PORT
          value: "4000"
        - name: KAFKA_BROKER_URI
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_BROKER_URI
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_USERNAME
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_PASSWORD
        - name: KAFKA_TOPIC_PREFIX
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_TOPIC_PREFIX
        - name: REDIS_PASSWORD
          value: redis
        - name: REDIS_HOST
          value: redis
        - name: REDIS_PORT
          value: '6379'

apiVersion: v1
kind: Service
metadata:
  name: delivery-app
spec:
  type: LoadBalancer
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4000
  selector:
    app: delivery-app

apiVersion: apps/v1
kind: Deployment
metadata:
  name: motoboy
spec:
  replicas: 3
  selector:
    matchLabels:
      app: motoboy
  template:
    metadata:
      labels:
        app: motoboy
    spec:
      nodeSelector:
        "beta.kubernetes.io/os": linux
      containers:
      - name: motoboy
        image: andersonkoester/motoboy:latest
        command: ["yarn", "prod"]
        env:
        - name: KAFKA_BROKER_URI
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_BROKER_URI
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_USERNAME
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_PASSWORD
        - name: KAFKA_TOPIC_PREFIX
          valueFrom:
            secretKeyRef:
              name: restaurant-secret
              key: KAFKA_TOPIC_PREFIX

apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis
        command: ["redis-server", "--requirepass", "redis"]
        ports:
        - containerPort: 6379
          name: redis

apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
  selector:
    app: redis